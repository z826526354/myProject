{"version":3,"sources":["model/storage.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["storage","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","remove","removeItem","Todolist","props","addDataOne","title","refs","tempList","state","list","alert","push","checked","setState","addDataTwo","e","keyCode","removeData","splice","checkboxChange","todolist","this","className","ref","onKeyUp","onClick","map","type","onChange","bind","changeContent","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f75c9eb.chunk.js","sourcesContent":["var storage = {\r\n\tset (key, value) {\r\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\r\n\t},\r\n\tget (key) {\r\n\t\treturn JSON.parse(localStorage.getItem(key));\r\n\t},\r\n\tremove (key) {\r\n\t\tlocalStorage.removeItem(key)\r\n\t}\r\n}\r\nexport default storage;","import React, { Component } from 'react';\r\nimport storage from '../model/storage';\r\n// 引入自定义模块\r\nimport '../assets/css/todolist.css';\r\n\r\nclass Todolist extends Component{\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tlist: [\r\n\t\t\t\t// {title: '123', checked: true},\r\n\t\t\t\t// {title: 'hsz', checked: false},\r\n\t\t\t\t// {title: '1111', checked: false},\r\n\t\t\t\t// {title: 'hsfafaz', checked: false},\r\n\t\t\t\t// {title: 'hasdfaggasgz', checked: true}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\taddDataOne = () => {\r\n\t\tlet title = this.refs.title.value;\r\n\t\tlet tempList = this.state.list;\r\n\t\tif (title === '') {\r\n\t\t\talert('你得填点东西')\r\n\t\t}else{\r\n\t\t\ttempList.push({\r\n\t\t\t\ttitle: title,\r\n\t\t\t\tchecked: false\r\n\t\t\t});\r\n\t\t\tthis.refs.title.value = '';\r\n\t\t\tstorage.set('todolist', tempList)\r\n\t\t}\r\n\r\n\t\t// 改变赋值\r\n\t\tthis.setState({\r\n\t\t\tlist: tempList\r\n\t\t})\r\n\t}\r\n\r\n\taddDataTwo = (e) => {\r\n\t\tlet title = this.refs.title.value;\r\n\t\tlet tempList = this.state.list;\r\n\t\tif (e.keyCode === 13) {\r\n\t\t\tif (title === '') {\r\n\t\t\t\talert('你得填点东西')\r\n\t\t\t}else{\r\n\t\t\t\ttempList.push({\r\n\t\t\t\t\ttitle: title,\r\n\t\t\t\t\tchecked: false\r\n\t\t\t\t});\r\n\t\t\t\tthis.refs.title.value = '';\r\n\t\t\t\tstorage.set('todolist', tempList)\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tlist: tempList\r\n\t\t})\r\n\t}\r\n\r\n\tremoveData = (key) => {\r\n\t\t// console.log(key)\r\n\t\tlet tempList = this.state.list;\r\n\t\ttempList.splice(key, 1);\r\n\t\tstorage.set('todolist', tempList)\r\n\t\tthis.setState({\r\n\t\t\tlist: tempList\r\n\t\t})\r\n\t}\r\n\r\n\tcheckboxChange = (key) => {\r\n\t\tlet tempList = this.state.list;\r\n\t\ttempList[key].checked = !tempList[key].checked;\r\n\t\tstorage.set('todolist', tempList)\r\n\t\tthis.setState({\r\n\t\t\tlist: tempList\r\n\t\t})\r\n\t}\r\n\r\n\t// 生命周期函数\r\n\r\n\tcomponentDidMount () {\r\n\t\tlet todolist = storage.get('todolist');\r\n\t\tif (todolist) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tlist: todolist\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<header className=\"title\">\r\n\t\t\t\t\t<h2 className=\"todoTitle\">Todolist案例演示: </h2>\r\n\t\t\t\t\t<input className=\"inp\" ref='title' onKeyUp={this.addDataTwo} />\r\n\t\t\t\t\t<button onClick={this.addDataOne}>增加 + </button>\r\n\t\t\t\t</header>\r\n\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<div className=\"unfinish\">\r\n\t\t\t\t\t\t<h2>待办事项</h2>\r\n\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.list.map((value, key) => {\r\n\t\t\t\t\t\t\t\tif (!value.checked) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<li key={key}>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type='checkbox' checked={value.checked} onChange={this.checkboxChange.bind(this, key, value.checked)}/>\r\n\t\t\t\t\t\t\t\t\t\t\t<span onClick={this.changeContent}>{value.title}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<button onClick={this.removeData.bind(this, key)}>删除</button>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"finish\">\r\n\t\t\t\t\t\t<h2>已完成事项</h2>\r\n\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.list.map((value, key) => {\r\n\t\t\t\t\t\t\t\tif (value.checked) {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<li key={key}>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type='checkbox' checked={value.checked} onChange={this.checkboxChange.bind(this, key)} />\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{value.title}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t<button onClick={this.removeData.bind(this, key)}>删除</button>\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t{/*<ul>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// this指向问题\r\n\t\t\t\t\t\tthis.state.list.map((value, key) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={key}>{value} <button onClick={this.removeData.bind(this, key)}>删除 - </button></li>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t</ul>*/}\r\n\r\n\r\n\r\n\t\t\t</div> \r\n\t\t)\r\n\t}\r\n}\r\nexport default Todolist;","import React from 'react';\n// import logo from './asset/css/logo.svg';\n// import './assets/css/App.css';\nimport Todolist from './components/Todolist';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todolist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}